<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://puhachov.xyz/feed.xml" rel="self" type="application/atom+xml"/><link href="https://puhachov.xyz/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-12-07T21:57:04+00:00</updated><id>https://puhachov.xyz/feed.xml</id><title type="html">blank</title><subtitle>My personal webpage and log. Working on my PhD in CS at computer graphics lab. Process sketches and line drawings to make fine art. Research activities here - computer graphics, applied geometry, image processing.</subtitle><entry><title type="html">Adobe ExtendScript</title><link href="https://puhachov.xyz/blog/2022/adobe-extendscript/" rel="alternate" type="text/html" title="Adobe ExtendScript"/><published>2022-10-12T17:20:00+00:00</published><updated>2022-10-12T17:20:00+00:00</updated><id>https://puhachov.xyz/blog/2022/adobe-extendscript</id><content type="html" xml:base="https://puhachov.xyz/blog/2022/adobe-extendscript/"><![CDATA[<p>So Adobe offers a possibility to write scripts for their products: <a href="https://extendscript.docsforadobe.dev/introduction/extendscript-overview.html">Extendscript docs</a></p> <p>I used it for my project on sketch vectorization, to get a large dataset of drawings. The idea is to take simple drawings in vector format and render (rasterize) them with artistic brushes from Adobe Illustrator.</p> <div class="row justify-content-sm-center"> <div class="col-sm-4"> <img class="img-fluid rounded centered" src="https://raw.githubusercontent.com/ivanpuhachov/line-drawing-vectorization-polyvector-flow-dataset/main/png/test_50_8.png" alt="" title="" data-zoomable=""/> </div> </div> <p>They even offer a debug environment, although it’s quite old: <a href="https://github.com/Adobe-CEP/CEP-Resources/tree/master/ExtendScript-Toolkit">ExtendScript Toolkit</a></p> <blockquote> <p>Warning: Illustrator gives no respect to <code class="language-plaintext highlighter-rouge">svg</code> files. I ended up adding invisible frame (with width 0 and transparent color) to know the exact dimensions of svg file to center it properly in script itself.</p> </blockquote> <p>Last year I was generating that data by manually clicking “run” once every 500 images. Awful decision.</p> <p>Now I’m old and wise, I wrote a <del>bash</del> batch script to do it for me. Was it nice? No.</p> <p>To run your script from shell command use <code class="language-plaintext highlighter-rouge">"path_to_toolkit.exe" -run "path_to_script.jsx"</code></p> <div class="language-batch highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">"C:\Adobe ExtendScript Toolkit CC\ExtendScript Toolkit.exe"</span> <span class="na">-run </span><span class="s2">"C:\style.jsx"</span>
</code></pre></div></div> <div class="row justify-content-sm-center"> <div class="col-sm-4"> <img class="img-fluid rounded" src="/assets/img/adobe_toolkit_complains.png" alt="" title="" data-zoomable=""/> </div> </div> <div class="caption"> You should only run scripts from a trusted source. </div> <p>Now in order to prevent Illustrator asking “You sure you want to run it?” you need to place your script in a <em>trusted</em> directory.</p> <p>Just move “.jsx” file with script to <code class="language-plaintext highlighter-rouge">Documents/Adobe Scripts</code>. So reliable, so trustworthy, have fun with paths.</p> <p>Finally, batch script. Long story short:</p> <div class="language-batch highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@echo <span class="na">off</span>
<span class="k">for</span> <span class="na">/L </span><span class="vm">%%n</span> <span class="k">in</span> <span class="o">(</span><span class="m">1</span><span class="o">,</span><span class="m">1</span><span class="o">,</span><span class="m">10</span><span class="o">)</span> <span class="k">do</span> <span class="o">(</span>
    <span class="nb">echo</span> <span class="vm">%%n</span>
    <span class="kd">START</span> <span class="na">/WAIT </span><span class="s2">""</span> <span class="s2">"C:\Adobe ExtendScript Toolkit CC\ExtendScript Toolkit.exe"</span> <span class="na">-run </span><span class="s2">"C:\Users\ivanp\Documents\Adobe Scripts\stylize.jsx"""</span>
    <span class="nb">timeout</span> <span class="m">120</span>
<span class="o">)</span>
</code></pre></div></div> <ul> <li><code class="language-plaintext highlighter-rouge">START /WAIT ""</code> required so that this command at least waits until Illustrator is opening before running to the next line</li> <li><code class="language-plaintext highlighter-rouge">timeout 120</code> waits for 120 seconds before contunuing loop. Why 120? Manual measure. Batch scripts are wild.</li> </ul> <p>Maybe in a year I will become even wiser and find a better solution.</p>]]></content><author><name></name></author><category term="code"/><summary type="html"><![CDATA[Running scripts for ADobe Illustrator]]></summary></entry><entry><title type="html">Debugging Ubuntu / NVidia / CUDA / PyTorch relations</title><link href="https://puhachov.xyz/blog/2022/nvidia-gpu-debug/" rel="alternate" type="text/html" title="Debugging Ubuntu / NVidia / CUDA / PyTorch relations"/><published>2022-09-09T17:20:00+00:00</published><updated>2022-09-09T17:20:00+00:00</updated><id>https://puhachov.xyz/blog/2022/nvidia-gpu-debug</id><content type="html" xml:base="https://puhachov.xyz/blog/2022/nvidia-gpu-debug/"><![CDATA[<p>Personal story: got a weird issue right in the middle of the training: <code class="language-plaintext highlighter-rouge">Unable to determine the device handle for GPU 0000:01:00.0:Unknow Error</code>. Never happened to me before, had been training successfully for few month on this machine, long training sessions. Even worse, the process <code class="language-plaintext highlighter-rouge">python training.py</code> got stuck, unresponsive to <code class="language-plaintext highlighter-rouge">kill</code>, while GPU fans are ramping full-speed and stuck.</p> <p>Here are my notes on resolving these issues.</p> <h2 id="pytorch">PyTorch</h2> <p>Since recently (?), PyTorch comes with its own cuda libs. Unless you compile custom layers, you don’t need to have local cuda or cudnn. <strong>GPU drivers</strong> are required still.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>pytorch torchvision torchaudio <span class="nv">cudatoolkit</span><span class="o">=</span>11.3 <span class="nt">-c</span> pytorch
</code></pre></div></div> <p>Source:</p> <blockquote> <p><strong>ptrblck</strong>: <em>binaries ship with their own libraries and will not use your locally installed CUDA toolkit unless you build PyTorch from source or a custom CUDA extension</em> <a href="https://discuss.pytorch.org/t/is-it-required-to-set-up-cuda-on-pc-before-installing-cuda-enabled-pytorch/60181/27">discuss.pytorch.org</a></p> </blockquote> <p>Handy info from PyTorch:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">version</span><span class="p">.</span><span class="n">cuda</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">backends</span><span class="p">.</span><span class="n">cudnn</span><span class="p">.</span><span class="nf">version</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">get_device_name</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">get_device_properties</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
</code></pre></div></div> <h2 id="drivers">Drivers</h2> <p>There are plenty of instruction on driver installation. Basically, you have 3 options:</p> <ol> <li>Install drivers with Ubuntu software update (by far the easiest way, available in 20.04)</li> <li>Install with <code class="language-plaintext highlighter-rouge">sudo ubuntu-drivers autoinstall</code> or <code class="language-plaintext highlighter-rouge">sudo apt install nvidia-driver-440</code></li> <li>Download and install with CUDA runfile (they come with driver now)</li> </ol> <p>It is recommended to get rid of installed drivers with <code class="language-plaintext highlighter-rouge">purge</code>, however my runfile (I chose option 3) still complained that it found something previously installed.</p> <p>Handy commands:</p> <ul> <li><code class="language-plaintext highlighter-rouge">ubuntu-drivers devices</code> shows device specs and available drivers</li> </ul> <h3 id="note-on-nvidia-smi">Note on nvidia-smi</h3> <p><code class="language-plaintext highlighter-rouge">nvidia-smi</code> (stands for <a href="https://developer.nvidia.com/nvidia-system-management-interface">System Management Interface</a>) reports “Driver Version” and “CUDA Version” even if no cuda is installed. It is simply a cuda version that the driver supports. Source: <a href="https://forums.developer.nvidia.com/t/nvidia-smi-doesnt-show-cuda-version-even-after-installation/68738">nvidia dev support</a></p> <ul> <li><a href="https://enterprise-support.nvidia.com/s/article/Useful-nvidia-smi-Queries-2">Useful nvidia-smi queries</a></li> <li><code class="language-plaintext highlighter-rouge">sudo nvidia-smi --gpu-reset</code> to reset gpu memory from <a href="https://discuss.pytorch.org/t/when-i-shut-down-the-pytorch-program-by-kill-i-encountered-the-problem-with-the-gpu/6315/2">pytorch forum</a></li> </ul> <h2 id="cuda">CUDA</h2> <p>After installing, add to <code class="language-plaintext highlighter-rouge">.bashrc</code>:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">"/usr/local/cuda-11.6/bin:</span><span class="nv">$PATH</span><span class="s2">"</span>
<span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span><span class="s2">"/usr/local/cuda-11.6/lib64:</span><span class="nv">$LD_LIBRARY_PATH</span><span class="s2">"</span>
</code></pre></div></div> <h2 id="my-issue">My issue</h2> <p>I’ll jump right to the solution: it’s either overheating or lack of power. Similar issue was discussed on <a href="https://forums.developer.nvidia.com/t/gpu-fans-go-to-max-and-graphics-drivers-hang/222069">developer forum</a></p> <ul> <li><code class="language-plaintext highlighter-rouge">dmesg</code> to read system reports</li> <li><code class="language-plaintext highlighter-rouge">sudo nvidia-bug-report.sh</code> to get full report. decompress file and enjoy.</li> </ul> <blockquote> <p><strong>generix</strong>: <code class="language-plaintext highlighter-rouge">Jul 27 16:39:09 emano kernel: NVRM: Xid (PCI:0000:1a:00): 79, pid=1370, GPU has fallen off the bus.</code> (<a href="https://docs.nvidia.com/deploy/xid-errors/index.html#topic_4">docs</a>) One of the gpus is shutting down. Since it’s not always the same one, I guess they’re not damaged but either overheating or lack of power occurs. Please monitor temperatures, check PSU, try limiting clocks using nvidia-smi -lgc.</p> </blockquote> <h3 id="solution">Solution</h3> <p>I limited both power consumption and clock speed and (I hope) it works now. Hope to find the exact problem and solve it (more cooling or better power unit).</p> <ul> <li><code class="language-plaintext highlighter-rouge">nvidia-smi -lgc 1500</code> to set clockspeed (note<sup id="fnref:bignote" role="doc-noteref"><a href="#fn:bignote" class="footnote" rel="footnote">1</a></sup>)</li> <li><code class="language-plaintext highlighter-rouge">sudo nvidia-smi -pl 200</code> to limit power consumption to 200 w</li> <li><code class="language-plaintext highlighter-rouge">nvidia-smi -q -d CLOCK</code> to check clock speed</li> </ul> <blockquote> <p>Note that those limits are not permanent and will be reset after reboot.</p> </blockquote> <h3 id="also">Also</h3> <ul> <li><a href="https://forums.developer.nvidia.com/t/fans-are-locked-to-max-speed-very-noisy-please-help/140158">Fan maxed out because two other are stuck</a></li> <li>some reported issues between motherboard and gpus (pcie lanes for multi-gpu setup) [https://forums.developer.nvidia.com/t/unable-to-determine-the-device-handle-for-gpu-000000-0-gpu-is-lost-reboot-the-system-to-recover-this-gpu/176891/6]</li> <li>more discussion on error <code class="language-plaintext highlighter-rouge">XID 79</code> dev forum <a href="https://forums.developer.nvidia.com/t/unable-to-determine-the-device-handle-for-gpu/171155/14">1</a> <a href="https://forums.developer.nvidia.com/t/unable-to-determine-the-device-handle-for-gpu-000000-0-unknown-error/205143">2</a> <a href="https://forums.developer.nvidia.com/t/unable-to-determine-the-device-handle-for-gpu-gpu-is-lost/57641/11">3</a></li> </ul> <div class="footnotes" role="doc-endnotes"> <ol> <li id="fn:bignote" role="doc-endnote"> <p>reports that <a href="https://forums.developer.nvidia.com/t/fans-are-locked-to-max-speed-very-noisy-please-help/140158">nvidia removed support of clock limits for commercial cards</a> <a href="#fnref:bignote" class="reversefootnote" role="doc-backlink">&#8617;</a></p> </li> </ol> </div>]]></content><author><name></name></author><category term="code"/><category term="cuda"/><summary type="html"><![CDATA[My notes on debugging GPU-related issues]]></summary></entry><entry><title type="html">Render mesh with per-vertex color</title><link href="https://puhachov.xyz/blog/2022/blender-vertex-color/" rel="alternate" type="text/html" title="Render mesh with per-vertex color"/><published>2022-07-19T15:12:00+00:00</published><updated>2022-07-19T15:12:00+00:00</updated><id>https://puhachov.xyz/blog/2022/blender-vertex-color</id><content type="html" xml:base="https://puhachov.xyz/blog/2022/blender-vertex-color/"><![CDATA[<p>Suppose you want to render a mesh with per-vertex data (e.g. temperature). The simplest way to do so is to use “vertex colr” property and plug it in the BSDF settings in Blender. Let me show you how.</p> <blockquote> <p>TLDR: you can download blender file: <a href="/assets/img/blender/color-homer.blend">color-homer.blend</a></p> </blockquote> <div class="row justify-content-sm-center"> <div class="col-sm-8 "> <img class="img-fluid rounded" src="/assets/img/blender/homer-eigen.png" alt="" title="Homer mesh with its Laplacian eigenvector" data-zoomable=""/> </div> </div> <div class="caption"> By the way, this is a visualization of mesh Laplacian eigenvector. </div> <h3 id="0-setup">0. Setup</h3> <p>You have an <code class="language-plaintext highlighter-rouge">.obj</code> file and some numerical per-vertex data to visualize.</p> <p>In my case, I have a <code class="language-plaintext highlighter-rouge">homer.obj</code> mesh with 6002 vertices, and a numpy array of 6002 numbers:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-0.01354811  0.01384337 -0.01091743 -0.00612948 -0.00262014 -0.01210054
  0.01073517  0.00721383 -0.00989255 -0.0104049 ...
</code></pre></div></div> <p>I will convert them to colors right now with this python script:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib</span>

<span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">loadtxt</span><span class="p">(</span><span class="sh">"</span><span class="s">data.txt</span><span class="sh">"</span><span class="p">)</span>
<span class="n">norm</span> <span class="o">=</span> <span class="n">matplotlib</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="nc">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="n">vmax</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="n">cmap</span> <span class="o">=</span> <span class="n">matplotlib</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="nf">get_cmap</span><span class="p">(</span><span class="sh">'</span><span class="s">coolwarm</span><span class="sh">'</span><span class="p">)</span>
<span class="n">datacolors</span> <span class="o">=</span> <span class="nf">cmap</span><span class="p">(</span><span class="nf">norm</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>

<span class="n">np</span><span class="p">.</span><span class="nf">savetxt</span><span class="p">(</span><span class="sh">"</span><span class="s">data_colors.txt</span><span class="sh">"</span><span class="p">,</span> <span class="n">datacolors</span><span class="p">)</span>
</code></pre></div></div> <p>My <code class="language-plaintext highlighter-rouge">data_colors.txt</code> file is now:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4.199907090352941186e-01 5.529885453176470733e-01 9.426303421882352707e-01 1.000000000000000000e+00
9.476541841529411148e-01 5.659764341686274181e-01 4.474781480392157063e-01 1.000000000000000000e+00
5.000305645176470470e-01 6.385084675764706175e-01 9.810701241058823463e-01 1.000000000000000000e+00
6.513978391568626680e-01 7.681214866470587044e-01 9.958911501294117619e-01 1.000000000000000000e+00
...
</code></pre></div></div> <h3 id="1-importing-mesh">1. Importing mesh</h3> <p><code class="language-plaintext highlighter-rouge">File</code> -&gt; <code class="language-plaintext highlighter-rouge">Import</code> -&gt; <code class="language-plaintext highlighter-rouge">Wavefront (.obj)</code></p> <blockquote> <p>Important: opt-in for <code class="language-plaintext highlighter-rouge">Keep Vert Order</code> in <code class="language-plaintext highlighter-rouge">Geometry</code> import settings. Otherwise, Blender will reshuffle vertices for its convenience, and your data will not be visualized properly.</p> </blockquote> <div class="row justify-content-sm-center"> <div class="col-sm-5"> <img class="img-fluid rounded" src="/assets/img/blender/keep-vertex-order.png" alt="" title="Keep vertex order in import settings"/> </div> </div> <h3 id="2-creating-vertex-colors">2. Creating Vertex Colors</h3> <p>First, we need to create a vertex color property associated with this mesh. While having it selected, go to <code class="language-plaintext highlighter-rouge">Object Data Properties</code> -&gt; <code class="language-plaintext highlighter-rouge">Vertex Colors</code> and create an empty layer (default name is <code class="language-plaintext highlighter-rouge">Col</code>).</p> <div class="row justify-content-sm-center"> <div class="col-sm-5"> <img class="img-fluid rounded" src="/assets/img/blender/homer-vertex-colors.png" alt="" title="Keep vertex order in import settings"/> </div> </div> <p>In order for renderer to use this color, we need to add it to shader. Keep your mesh selected, go to <code class="language-plaintext highlighter-rouge">Shader Editor</code> (<code class="language-plaintext highlighter-rouge">Shift F3</code>) viewer and add a <code class="language-plaintext highlighter-rouge">Vertex Color</code> node (<code class="language-plaintext highlighter-rouge">Shift A</code> to add, then search). Make sure to connect its output to the BSDF node <code class="language-plaintext highlighter-rouge">Base Color</code>.</p> <div class="row justify-content-sm-center"> <div class="col-md-9"> <img class="img-fluid rounded" src="/assets/img/blender/homer-shader.png" alt="" title="Keep vertex order in import settings" data-zoomable=""/> </div> </div> <h3 id="3-filling-color-values">3. Filling color values</h3> <p>Finally, run a script to set the values from <code class="language-plaintext highlighter-rouge">data_colors.txt</code> file to the mesh. Either in <code class="language-plaintext highlighter-rouge">Text Editor</code> (<code class="language-plaintext highlighter-rouge">Shift F11</code>) or in <code class="language-plaintext highlighter-rouge">Python Console</code> (<code class="language-plaintext highlighter-rouge">Shift F4</code>) run this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">bpy</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">nppath</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">data_colors.txt</span><span class="sh">"</span>

<span class="n">datacolors</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">loadtxt</span><span class="p">(</span><span class="n">nppath</span><span class="p">)</span>

<span class="n">obj</span> <span class="o">=</span> <span class="n">bpy</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">objects</span><span class="p">[</span><span class="sh">'</span><span class="s">homer</span><span class="sh">'</span><span class="p">]</span>
<span class="n">col</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">vertex_colors</span><span class="p">[</span><span class="sh">'</span><span class="s">Col</span><span class="sh">'</span><span class="p">]</span>
<span class="n">polygons</span> <span class="o">=</span> <span class="n">obj</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">polygons</span>

<span class="n">vertex_map</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
<span class="k">for</span> <span class="n">poly</span> <span class="ow">in</span> <span class="n">polygons</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">v_ix</span><span class="p">,</span> <span class="n">l_ix</span> <span class="ow">in</span> <span class="nf">zip</span><span class="p">(</span><span class="n">poly</span><span class="p">.</span><span class="n">vertices</span><span class="p">,</span> <span class="n">poly</span><span class="p">.</span><span class="n">loop_indices</span><span class="p">):</span>
        <span class="n">vertex_map</span><span class="p">[</span><span class="n">v_ix</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">l_ix</span><span class="p">)</span>

<span class="k">for</span> <span class="n">v_ix</span><span class="p">,</span> <span class="n">l_ixs</span> <span class="ow">in</span> <span class="n">vertex_map</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="k">for</span> <span class="n">l_ix</span> <span class="ow">in</span> <span class="n">l_ixs</span><span class="p">:</span>
        <span class="n">col</span><span class="p">.</span><span class="n">data</span><span class="p">[</span><span class="n">l_ix</span><span class="p">].</span><span class="n">color</span> <span class="o">=</span> <span class="n">eigencolors</span><span class="p">[</span><span class="n">v_ix</span><span class="p">]</span>
</code></pre></div></div> <h4 id="tip">Tip</h4> <p>You can view vertex colors in viewport shading by changing its color settings to <code class="language-plaintext highlighter-rouge">Vertex</code>:</p> <div class="row justify-content-sm-center"> <div class="col-md-6"> <img class="img-fluid rounded" src="/assets/img/blender/homer-viewport.png" alt="" title="Keep vertex order in import settings"/> </div> </div> <h3 id="bonus-animating-vertex-colors">Bonus: animating vertex colors</h3> <p>To animate transitioning between two sets of vertex colors, create and fill corresponding properties. Then, in shader editor, add <code class="language-plaintext highlighter-rouge">Mix RGB</code> node and connect them.</p> <div class="row justify-content-sm-center"> <div class="col-md-9"> <img class="img-fluid rounded" src="/assets/img/blender/homer-color-mix.png" alt="" title="Keep vertex order in import settings" data-zoomable=""/> </div> </div> <p>Now the mixing factor <code class="language-plaintext highlighter-rouge">Fac</code> can be animated with adding keyframes (right-click menu or <code class="language-plaintext highlighter-rouge">I</code>) for the animation frames. You might need to have a <code class="language-plaintext highlighter-rouge">Timeline</code> editor open to do that properly.</p> <div class="row justify-content-sm-center"> <div class="col-sm-8 "> <img class="img-fluid rounded" src="/assets/img/blender/2homereigen.gif" alt="" title="Homer mesh with its Laplacian eigenvector"/> </div> </div> <div class="caption"> Sorry for the color flickering, GIF format has limited color depth. </div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># adding white color to transparent renderings</span>
<span class="k">for </span>f <span class="k">in </span>homer_seq/<span class="k">*</span>.png                                                  
convert <span class="nv">$f</span> <span class="nt">-background</span> white <span class="nt">-alpha</span> remove <span class="nt">-alpha</span> off 2<span class="nv">$f</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># composing into a gif, color filter to remove artifacts on the bounary</span>
ffmpeg <span class="nt">-f</span> image2 <span class="nt">-framerate</span> 12 <span class="nt">-i</span> 2homer_seq/%04d.png <span class="nt">-filter_complex</span> <span class="s2">"split[s0][s1];[s0]palettegen[p];[s1][p]paletteuse"</span> <span class="nt">-loop</span> 0 homereigen.gif
</code></pre></div></div>]]></content><author><name></name></author><category term="blender"/><summary type="html"><![CDATA[Suppose you want to render a mesh with per-vertex data (e.g. temperature). The simplest way to do so is to use "vertex color" property and plug it in the BSDF settings in Blender. Let me show you how.]]></summary></entry><entry><title type="html">🇺🇦 Ukrainian scholars are welcomed in North America</title><link href="https://puhachov.xyz/blog/2022/labs-for-ukrainians/" rel="alternate" type="text/html" title="🇺🇦 Ukrainian scholars are welcomed in North America"/><published>2022-03-17T15:12:00+00:00</published><updated>2022-03-17T15:12:00+00:00</updated><id>https://puhachov.xyz/blog/2022/labs-for-ukrainians</id><content type="html" xml:base="https://puhachov.xyz/blog/2022/labs-for-ukrainians/"><![CDATA[<p>📐 Terrence Tao blogpost for displaced mathematicians: <a href="https://terrytao.wordpress.com/2022/03/02/resources-for-displaced-mathematicians/">terrytao.wordpress.com</a></p> <p>🏫 Main website for mathematicians: <a href="https://sites.google.com/view/ukrainian-mathematicians">sites.google.com/view/ukrainian-mathematicians</a><br/> If you are looking for a position, fill out this form: <a href="https://docs.google.com/forms/d/1ho-Vslp_rWgipWHESaOc8l-56ROv5aOiYLsMeQx5O5o">docs.google.com</a></p> <p>🧪 List of labs supporting Ukrainian scientists (cross-discipline): <a href="https://docs.google.com/spreadsheets/d/1HqTKukfJGpmowQnSh4CoFn3T6HXcNS1T1pK-Xx9CknQ/edit?usp=sharing">docs.google.com/spreadsheets</a></p> <p>🧲 If you want to join the initiative and have open faculty positions, please fill this form: <a href="https://docs.google.com/forms/d/e/1FAIpQLSeRGe5Da_b6GGyC6VT7CLGViGs06SzeuX7wRKpC4K5tnvlhgg/viewform">docs.google.com/forms</a></p> <p>List of laboratories is created and supported by Andrew Kern, Björn Grüning, Anton Nekrutenko, <a href="https://usegalaxy.org/">Galaxy Project</a></p> <blockquote> <p>Cruel Russian invasion should be stopped!<br/> Consider donating directly to 🏦 National Bank of Ukraine <a href="https://helpua.bank.gov.ua/">fundraising account</a> or 🏥 <a href="https://unitedhelpukraine.org/">United Help Ukraine</a></p> </blockquote>]]></content><author><name></name></author><category term="links"/><summary type="html"><![CDATA[If you want to continue your research in USA or Canada, take a look here.]]></summary></entry><entry><title type="html">Adversarial Art</title><link href="https://puhachov.xyz/blog/2021/adversarial-art/" rel="alternate" type="text/html" title="Adversarial Art"/><published>2021-08-05T15:12:00+00:00</published><updated>2021-08-05T15:12:00+00:00</updated><id>https://puhachov.xyz/blog/2021/adversarial-art</id><content type="html" xml:base="https://puhachov.xyz/blog/2021/adversarial-art/"><![CDATA[<p>Today I learned about Tom White (a.k.a. <a href="https://twitter.com/dribnet">dribnet</a>) and his works on fooling vision systems with artisitc images. My <a href="/projects/adversarial_vandal/">project on adversarial vandalism</a> was inspired by another work by Matty Mariansky on <a href="http://www.aiartonline.com/highlights-2020/matty-mariansky/">Neurips Workshop</a>.</p> <p>Since I now know two examples of adversarial attacks as an artistic instrument, I decided to make a list of them. Like the <a href="https://aiartists.org/">AIArtists</a> but my own minimalistic one.</p> <hr/> <h2 id="matty-mariansky">Matty Mariansky</h2> <ul> <li>Twitter: <a href="https://twitter.com/mmariansky">mmariansky</a></li> <li>Personal page: <a href="https://supersize.co.il/">supersize.co.il/</a></li> </ul> <p><a data-flickr-embed="true" href="https://www.flickr.com/photos/191143608@N06/50680063063/in/dateposted-public/" title="1lineA (1)"><img src="https://live.staticflickr.com/65535/50680063063_39210e1745.jpg" width="500" height="500" alt="1lineA (1)"/></a><script async="" src="//embedr.flickr.com/assets/client-code.js" charset="utf-8"></script></p> <hr/> <h2 id="tom-white">Tom White</h2> <ul> <li>Twitter: <a href="https://twitter.com/dribnet">dribnet</a></li> <li>Personal page: <a href="https://drib.net/about">drib.net/about</a></li> </ul> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0"> <img class="img-fluid rounded z-depth-1" src="https://images.squarespace-cdn.com/content/v1/5c3518f55cfd7963746dd576/1569836890778-8LJ4VA64X3UUQT25BU3J/rabbit_square_1500_brighter.jpg?format=1500w"/> </div> </div> <div class="caption"> Image credits go to https://drib.net/about </div> <hr/> <p>TBD</p>]]></content><author><name></name></author><category term="links"/><category term="images"/><summary type="html"><![CDATA[Updated list of artists doing art by adversarial attacks. With examples!]]></summary></entry><entry><title type="html">Naive pointcoud visualization in Blender</title><link href="https://puhachov.xyz/blog/2021/blender-pointcloud/" rel="alternate" type="text/html" title="Naive pointcoud visualization in Blender"/><published>2021-07-21T15:12:00+00:00</published><updated>2021-07-21T15:12:00+00:00</updated><id>https://puhachov.xyz/blog/2021/blender-pointcloud</id><content type="html" xml:base="https://puhachov.xyz/blog/2021/blender-pointcloud/"><![CDATA[<p>There is a point cloud vidualizer for Blender - <a href="https://github.com/uhlik/bpy">uhlik/bpy</a>. You can follow along with this short youtube tutorial.</p> <iframe width="560" height="315" src="https://www.youtube-nocookie.com/embed/eXct_7k779Q" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe> <p>However, I received errors when tring to render the pointcloud in Blender-2.91. Apparently, only paid version from blendermarket <a href="https://github.com/uhlik/bpy/issues/47">is supported</a>.</p> <hr/> <h2 id="roundabout">Roundabout</h2> <p>Dirty way to render a pointcloud - use a Python script to place spheres. Simply run a script (<code class="language-plaintext highlighter-rouge">Shift-F11</code>), then the spheres can be rendered as usual.</p> <p><img src="/assets/img/bunnypoints.png" alt=""/></p> <blockquote> <p>Warning: it is slow. Let me know what goes wrong here and how to improve it.</p> </blockquote> <h3 id="code">Code</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">bpy</span>
<span class="kn">import</span> <span class="n">bmesh</span>
<span class="kn">import</span> <span class="n">mathutils</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="n">mymesh</span> <span class="o">=</span> <span class="n">bpy</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">meshes</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="sh">'</span><span class="s">PointCloud</span><span class="sh">'</span><span class="p">)</span>
<span class="n">myobj</span>  <span class="o">=</span> <span class="n">bpy</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="sh">'</span><span class="s">PointCloud</span><span class="sh">'</span><span class="p">,</span> <span class="n">mymesh</span><span class="p">)</span>
<span class="n">bpy</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">collection</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nf">link</span><span class="p">(</span><span class="n">myobj</span><span class="p">)</span>
<span class="n">bpy</span><span class="p">.</span><span class="n">context</span><span class="p">.</span><span class="n">view_layer</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="n">active</span> <span class="o">=</span> <span class="n">myobj</span>

<span class="n">filepath</span> <span class="o">=</span> <span class="sh">"</span><span class="s">/folder/bunny_pointcloud.txt</span><span class="sh">"</span> <span class="c1"># path to your data file. 
</span><span class="n">scale</span> <span class="o">=</span> <span class="mi">25</span> <span class="c1"># scaling the point cloud
</span>

<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span> <span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">loadtxt</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>

<span class="n">bm</span> <span class="o">=</span> <span class="n">bmesh</span><span class="p">.</span><span class="nf">new</span><span class="p">()</span>

<span class="c1"># this cycle will take time, progress is reported in the console
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="n">point</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">,:</span><span class="mi">3</span><span class="p">]</span>
    <span class="n">mat</span> <span class="o">=</span> <span class="n">mathutils</span><span class="p">.</span><span class="n">Matrix</span><span class="p">.</span><span class="nc">Translation</span><span class="p">(</span><span class="n">point</span><span class="o">*</span><span class="n">scale</span><span class="p">)</span> <span class="c1"># setting the translation matrix
</span>    <span class="c1"># creating a sphere in the origin, moving it by translation matrix
</span>    <span class="n">mesh</span> <span class="o">=</span> <span class="n">bmesh</span><span class="p">.</span><span class="n">ops</span><span class="p">.</span><span class="nf">create_uvsphere</span><span class="p">(</span><span class="n">bm</span><span class="p">,</span> <span class="n">u_segments</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span> <span class="n">v_segments</span><span class="o">=</span><span class="mi">12</span><span class="p">,</span>
                    <span class="n">diameter</span><span class="o">=</span><span class="mf">0.04</span><span class="p">,</span> <span class="n">matrix</span><span class="o">=</span><span class="n">mat</span> <span class="p">)</span> 
    <span class="c1"># progress console output
</span>    <span class="n">msg</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">point </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> of </span><span class="si">{</span><span class="n">data</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="mi">1</span><span class="si">}</span><span class="sh">"</span>
    <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">msg</span> <span class="o">+</span> <span class="nf">chr</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">msg</span><span class="p">))</span>
    <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>

<span class="n">bm</span><span class="p">.</span><span class="nf">to_mesh</span><span class="p">(</span><span class="n">mymesh</span><span class="p">)</span>
<span class="n">bm</span><span class="p">.</span><span class="nf">free</span><span class="p">()</span>

<span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">"</span><span class="s">DONE</span><span class="sh">"</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="o">*</span><span class="nf">len</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span><span class="o">+</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">flush</span><span class="p">()</span>
</code></pre></div></div> <h3 id="input">Input</h3> <p>Input is similar to the usual <code class="language-plaintext highlighter-rouge">ply</code> or <code class="language-plaintext highlighter-rouge">obj</code> format, except that we only leave vertices locations. For example:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-0.0369122 0.127512 0.00276757 0.850855 0.5 
-0.0457707 0.130327 0.00306785 0.900159 0.5 
-0.0708847 0.149834 0.0388672 0.398443 0.5 
-0.00331557 0.130403 0.0212208 0.85268 0.5 
...

</code></pre></div></div>]]></content><author><name></name></author><category term="blender"/><summary type="html"><![CDATA[Piece of code to load a pointcloud data in Blender]]></summary></entry><entry><title type="html">CVPR selected workshops</title><link href="https://puhachov.xyz/blog/2021/cvpr-workshops/" rel="alternate" type="text/html" title="CVPR selected workshops"/><published>2021-06-29T15:12:00+00:00</published><updated>2021-06-29T15:12:00+00:00</updated><id>https://puhachov.xyz/blog/2021/cvpr-workshops</id><content type="html" xml:base="https://puhachov.xyz/blog/2021/cvpr-workshops/"><![CDATA[<p>OpenAccess link: <a href="https://openaccess.thecvf.com/CVPR2021_workshops/menu">openaccess.thecvf.com</a></p> <blockquote> <p>Workshop with open recordings are marked :sunny: (as for June 29th)</p> </blockquote> <ul> <li>Sketch-Oriented Deep Learning (<strong>SketchDL</strong>): <a href="https://sketchdl.github.io/">sketchdl.github.io/</a></li> <li>Differential Geometry in Computer Vision and Machine Learning: <a href="https://diffcvml.org/2021/">diffcvml.org/2021/</a></li> <li>:sunny: Frontiers of Monocular 3D Perception: <a href="https://sites.google.com/view/mono3d-workshop">sites.google.com/view/mono3d-workshop</a></li> <li>:sunny: 3D Scene Understanding for Vision, Graphics, and Robotics: <a href="https://scene-understanding.com/">scene-understanding.com/</a></li> <li>:sunny: Workshop on Language for 3D Scenes: <a href="https://language3dscenes.github.io/">language3dscenes.github.io/</a></li> <li>:sunny: Learning to Generate 3D Shapes and Scenes: <a href="https://learn3dg.github.io/">learn3dg.github.io/</a></li> <li>Computer Vision for Fashion, Art, and Design: <a href="https://sites.google.com/zalando.de/cvfad2021/home">sites.google.com/zalando.de/cvfad2021/home</a></li> </ul>]]></content><author><name></name></author><category term="links"/><summary type="html"><![CDATA[Personal connection of CVPR 2021 workshops and papers]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://puhachov.xyz/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://puhachov.xyz/blog/2021/distill</id><content type="html" xml:base="https://puhachov.xyz/blog/2021/distill/"><![CDATA[<p><strong>NOTE:</strong> Citations, footnotes, and code blocks do not display correctly in the dark mode since distill does not support the dark mode by default. If you are interested in correctly adding dark mode support for distill, please open <a href="https://github.com/alshedivat/al-folio/discussions">a discussion</a> and let us know.</p> <h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look well in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span> <span class="nx">x</span> <span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li>Unordered list can use asterisks</li> <li>Or minuses</li> <li>Or pluses</li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="../blob/master/LICENSE">I’m a relative reference to a repository file</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting. 
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">a post with github metadata</title><link href="https://puhachov.xyz/blog/2020/github-metadata/" rel="alternate" type="text/html" title="a post with github metadata"/><published>2020-09-28T21:01:00+00:00</published><updated>2020-09-28T21:01:00+00:00</updated><id>https://puhachov.xyz/blog/2020/github-metadata</id><content type="html" xml:base="https://puhachov.xyz/blog/2020/github-metadata/"><![CDATA[<p>A sample blog page that demonstrates the accessing of github meta data.</p> <h2 id="what-does-github-metadata-do">What does Github-MetaData do?</h2> <ul> <li>Propagates the site.github namespace with repository metadata</li> <li>Setting site variables : <ul> <li>site.title</li> <li>site.description</li> <li>site.url</li> <li>site.baseurl</li> </ul> </li> <li>Accessing the metadata - duh.</li> <li>Generating edittable links.</li> </ul> <h2 id="additional-reading">Additional Reading</h2> <ul> <li>If you’re recieving incorrect/missing data, you may need to perform a Github API<a href="https://github.com/jekyll/github-metadata/blob/master/docs/authentication.md"> authentication</a>.</li> <li>Go through this <a href="https://jekyll.github.io/github-metadata/">README</a> for more details on the topic.</li> <li><a href="https://github.com/jekyll/github-metadata/blob/master/docs/site.github.md">This page</a> highlights all the feilds you can access with github-metadata. <br/></li> </ul> <h2 id="example-metadata">Example MetaData</h2> <ul> <li>Host Name :</li> <li>URL :</li> <li>BaseURL :</li> <li>Archived :</li> <li>Contributors :</li> </ul>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><summary type="html"><![CDATA[a quick run down on accessing github metadata.]]></summary></entry><entry><title type="html">a post with twitter</title><link href="https://puhachov.xyz/blog/2020/twitter/" rel="alternate" type="text/html" title="a post with twitter"/><published>2020-09-28T15:12:00+00:00</published><updated>2020-09-28T15:12:00+00:00</updated><id>https://puhachov.xyz/blog/2020/twitter</id><content type="html" xml:base="https://puhachov.xyz/blog/2020/twitter/"><![CDATA[<p>A sample blog page that demonstrates the inclusion of Tweets/Timelines/etc.</p> <h1 id="tweet">Tweet</h1> <p>An example of displaying a tweet:</p> <div class="jekyll-twitter-plugin"><blockquote class="twitter-tweet"><p lang="sv" dir="ltr">jekyll-twitter-plugin (1.0.0): A Liquid tag plugin for Jekyll that renders Tweets from Twitter API <a href="http://t.co/m4EIQPM9h4">http://t.co/m4EIQPM9h4</a></p>&mdash; RubyGems (@rubygems) <a href="https://twitter.com/rubygems/status/518821243320287232?ref_src=twsrc%5Etfw">October 5, 2014</a></blockquote> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="timeline">Timeline</h1> <p>An example of pulling from a timeline:</p> <div class="jekyll-twitter-plugin"><a class="twitter-timeline" data-width="500" data-tweet-limit="3" href="https://twitter.com/jekyllrb?ref_src=twsrc%5Etfw">Tweets by jekyllrb</a> <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> </div> <h1 id="additional-details">Additional Details</h1> <p>For more details on using the plugin visit: <a href="https://github.com/rob-murray/jekyll-twitter-plugin">jekyll-twitter-plugin</a></p>]]></content><author><name></name></author><category term="sample-posts"/><category term="external-services"/><category term="formatting"/><summary type="html"><![CDATA[an example of a blog post with twitter]]></summary></entry></feed>